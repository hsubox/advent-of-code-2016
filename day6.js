/*
--- Day 6: Signals and Noise ---

Something is jamming your communications with Santa. Fortunately, your signal is only partially jammed, and protocol in situations like this is to switch to a simple repetition code to get the message through.

In this model, the same message is sent repeatedly. You've recorded the repeating message signal (your puzzle input), but the data seems quite corrupted - almost too badly to recover. Almost.

All you need to do is figure out which character is most frequent for each position. For example, suppose you had recorded the following messages:

eedadn
drvtee
eandsr
raavrd
atevrs
tsrnev
sdttsa
rasrtv
nssdts
ntnada
svetve
tesnvt
vntsnd
vrdear
dvrsen
enarar
The most common character in the first column is e; in the second, a; in the third, s, and so on. Combining these characters returns the error-corrected message, easter.

Given the recording in your puzzle input, what is the error-corrected version of the message being sent?

Your puzzle answer was tzstqsua.

--- Part Two ---

Of course, that would be the message - if you hadn't agreed to use a modified repetition code instead.

In this modified code, the sender instead transmits what looks like random data, but for each character, the character they actually want to send is slightly less likely than the others. Even after signal-jamming noise, you can look at the letter distributions in each column and choose the least common letter to reconstruct the original message.

In the above example, the least common character in the first column is a; in the second, d, and so on. Repeating this process for the remaining characters produces the original message, advent.

Given the recording in your puzzle input and this new decoding methodology, what is the original message that Santa is trying to send?

Your puzzle answer was myregdnr.
*/

var input = `jpnomsle
wosinwfi
lekivkmf
ijymvkgq
bmwgxxrm
wctorbkj
iuktmcxm
xzufudbs
cwmsutoh
pcknfbys
yqjwprss
tyjpkbzw
smzvjevb
cvokjxwh
gpgcqtra
ddhfelaf
bbyfmepw
mkwbkugd
lipyfcji
whebvmly
fnfceaiv
lbiajtkz
odqbucmm
eytqacld
iswggugt
vsbeelal
qzuagiql
hwtibcxa
lpxfvhmo
pnwjlqsb
ksnntlgo
yjoizdcx
rtqwtjuk
ehrrryvq
aijkhibu
blzcoqqt
byxxkdzc
ptlkniqa
geolrsnl
ubhmuzjb
damdpnuu
smnjkopv
bvdfbuao
rserfaeg
dogngyha
xkzojucm
dfbqwprv
qwgvbjfw
mvpnizwm
wsampicy
yurbjmhm
drmgzhqp
dzianjpi
iresuphy
lxjrzrcv
ffjfzxdf
ssrddhnd
bvjefcmn
zqjhqrtl
uhgxmesn
nsziibek
acdgklky
niizwhfj
dengnljm
xmqszgyi
oufizqmt
ynhxyfva
qkwqtioc
todqskbu
zsluppbw
xvlbykhb
qgoeowcu
lvhwewll
uqexslyr
bgktzjzn
ldeojqqi
gismwlhy
htarpyss
oxetowsl
iymtvyia
rcsdusmz
nzwpiiqq
nwpubxxc
deifwrms
estasjvp
rustvine
iecvrvwv
ouwcaogn
kkapkike
sharidxa
vrypzuso
kdmuultn
tdwrwvyv
fotsbqly
exvncncx
rzmqqska
ozxpbjgl
bjztltqm
mmzjvdnm
wglezjrg
jpmoyhwg
gpggddnf
vpfwhqqa
qnjiebzb
xthftnad
sbdtwsii
vojgpucl
krvrizgn
xllmrooy
mahsrwam
qcakvhkt
fvwdvlty
fkdgbfzg
vobdysbi
kfmwpydn
citzswdp
iynphpar
myrtfvdj
tgnjmjgx
bfnuugyb
hxnjjiub
suutqaja
licsnpja
kfazyoho
yjdcddul
lfuzvuko
cueyfqoo
cgdrpadf
pqhwtazv
gfiuemfx
vexkkndk
hzfmwzvj
pjswysbs
gpqannoj
wlcpvvbs
tdsugdnd
juaaukem
obhsqpmf
ebzodoib
hlgkjsof
rhdpftoc
tvkdgreo
knuacdvw
rutjaaze
hlapqcfu
eermrtme
kfsztndj
qjwclbif
axlrkqiz
pgozhccw
ufytusig
gdskhtzb
wdpwtqji
pfgzsxvn
bamiwews
enkfycps
dsglfyyz
arizzkcw
fyirvhby
igjyhvbi
bavypopm
fqudvrdi
gepouvac
ugbwodrp
hclwxxun
ncnlgwds
fvnaifxa
xtzfppwj
viekslmh
lksqojwk
xnlihitg
vxmlnoci
ccsmdidh
oqrtyvkz
urzmcqmj
qbnkluys
nvdazrnu
zvywgxdn
scugbiox
ewivhegg
yfyexsfs
kgocfzja
zrjdaqta
gkhpnanf
vlxjhfjt
ykgbopmt
utiesnih
shakguot
hywmcuku
gjltpbfr
lzkatxwc
wxieyztu
iwvtqbeh
tlcqcsjl
fuxqnppn
ouoernej
xfdtewzd
etoaplbw
secuzkdr
kclibqre
qooqiobq
nrcfwxfi
maqnntic
qwpulgbj
pdjzfvyj
iwqhwlnj
oihftklw
iywvbexe
rhpzloag
leaelzup
hlggwpor
pqehtxul
zkyaybep
gheivvpk
xqlgyrlb
wujztjtt
nrwxkmkd
ijtcaoux
tmmjmpeh
xdhdcytk
jpchdagy
qlfdefaw
emshcltx
prhmorgz
dhdxxubc
ntfmmmax
oxzaksof
zonxcmwn
njpytedo
fftomgwl
gzlvtohn
hyibhnja
irxwinpr
vojbajhr
kqgydtiq
pufiemmt
mvkqthft
xbjrglza
rrdlpzqy
gmayqdny
moykjapv
fcfzqmnq
hwcvctfe
aerljjio
ydvqdfym
vobhfewn
fvfcoohl
chqjnmcq
geupmbzm
bekjwcaz
olujcecy
tlmygzkv
mhgjxuvt
lwnjsqcu
yjoncnil
vbfhqdlb
gkrhryeh
cdofkbpu
jubtekng
azzixhzy
zgsskveh
ygxbbpgm
ntvepwno
uaivckks
kpcoypio
elfhilea
qofoadkv
cetmbhlm
cdqiheur
bopfgmrd
ioircgxh
znlyvzrq
nhsuqzst
hxizhcye
jktpxqxg
mrhhzqpq
phzlffwd
zfyipddp
ixwlukmz
uzmznxgp
bizkzxfx
gabulwor
jmguhjti
yzrbgcvy
waranxrq
otilexwt
ecwupxiv
rzdcomik
qkbgxhjv
dwkuiczc
jxghaqdc
srocreym
sxhgoexu
fghwatip
czdccopz
oiuyqhsh
ctxsjzlb
tlifjaof
uvgumrre
uneknsqz
oxkcxoqh
bypdayvx
agdrkwty
enuoyago
zowyrehd
moxjokhp
llsdktgq
ofccwfdq
betygaxh
ypcqavic
dppvquxj
qtfjgzrm
hyuatorj
utannehg
njylrfzo
azbhxjtg
flgkqfgk
rmimpbmd
lucexbnt
hrxujuba
cmymrpiv
tnwoqgyf
oovhrncn
zsbxhvpv
ywqfdmvv
lsfufyus
syqsyyyq
oxuqqgqz
dvmqxgyw
vkvvovci
jhzqcwsd
oamvebre
qncykjpp
kkxhndot
tzcxiwwt
dbmxcvlx
anexktve
axrssdyc
buwcouzt
ddtvfdeq
cgttxyuc
ilbidgtr
rfndwckv
bstpsmkx
cbzvrfnk
qjaqwbyi
vcpchkwk
vaapmcrf
xpbfarcg
nakawsui
wfyiwmpb
wbkxtkhc
mjigbbbf
sjdgahss
ahtdkgbu
dineiyik
soahqthe
ptmlrfaa
nfewoxxr
atgghurm
ulspehpz
hqzumvcm
vahbjujo
emrmchfj
ulfxsmod
bqoaxtvw
jfklxtsd
vyqmyqlr
dqoqtmvt
lgbzegrj
hicyyfjf
keagysmb
uanpokzr
pmmdayzv
aagsbnrn
jqwianxu
mivxziox
hyfwolyx
tdxjcoye
prlslumt
xnlljwjt
qfzbgzqr
wszgyzga
tpupozsc
vxhwkloy
pvrbtcdq
rjeeizwo
fevnqnvi
miqxseme
qrneqrxe
yzomhybx
tplrffhp
evxcbwvg
qhhxylde
kvzxublx
aaycljrc
fdonlrel
rswdadys
elpfzlgl
tbcppggi
bulqfhyu
ewbzhrqv
wwepirtw
ugazsxlk
xaalxyhv
imddfsvc
lszgvama
xzgwdixv
neukxolf
fmfvjylf
rxrcgmjg
gysmaadp
zankjgys
amefwpuh
scotnyzl
ssakungx
sakfzaud
dgdnjmjt
uyhdxrvl
ydhbtxah
chezbkhz
wjnyjuzk
kxvujbpw
igrjmhcm
gublnlvh
vjfrwqwg
oprvwhfr
yilyvzez
yhodibug
fivsekbb
cmlomgem
rpiomxuq
kaxjtsfg
fmfsffjr
wddxezfa
wcrligql
bnrohvbd
msprlord
rjyomeck
aigiqhns
nnjszkjz
kpdcrcuq
znuwpnsw
awservpq
mhbgizrc
gcqxiazq
ezpemwef
abvtqswk
zyvkkqap
pnyybtke
kqglepvn
lsxronqx
eccaqkln
jitacsjj
dibwyvne
achslqlr
zaocguqz
hrvktaun
desabwmb
ztmvhatf
qvsbgobs
xplhpigo
mnvoixgz
hbwwscfx
mbjbotfb
ycbeojag
uwqqlzse
gffufrdj
qhpjrmbw
fkprueel
ctenlqry
dqtrrffp
sweaftmd
yekzdapr
zyskkvsp
cjwysyjp
vphuswhl
tzbjniju
wvmxhrzk
vsyedbwh
uxllegxv
jginldku
jdczunlb
jgdruatz
makhdcsq
wexgoeax
squsatpz
cqubtkni
xrnfofvh
miuvlese
aefylred
fusyuybs
bykemjhu
aasrsjxf
ykvdmwxd
joyoibnb
tpoowkug
jnthvfhc
sxxfyiwb
ksqmggsz
ymjiliqp
uwcnppas
flakidlb
ikchcehd
ptatwguk
pmolarwq
snehzsaw
wwqmvmwy
ulvijwso
jbvgdeqk
xkkodsar
yvbtdfxu
hcpylcfh
xgxzfvkw
zlklsmdi
obrqupcw
ibkyzfoh
tqvvdgps
kzynbdif
ztjnvwsu
xksqgpqu
uwlpugoh
pdzhciob
kujijtjj
jvencltk
qozxxgkg
eoasncao
gpunvjky
ijqnioni
nsjpbqik
ttyrgxuc
nzxunpqn
rknbznol
wbmorrtq
tpfhbxfp
lxdjaykw
riubeihx
hrbbmbky
atjnsacd
xtekdptu
rdtevcyh
cjpssjvp
cjywepqo
rutbqeuw
sdbxunzj
ekpvsftr
obutdocz
jwcpzflw
lqcnhser
lhojehdt
gfrnfmxx
jyxwltij
pupdxhxy
oqqbpjrn
zmrobltk
rhkvdyec
nrvsnrtc
pmpmdixu
hwqzyvef
tcnckoov
icgvlwso
nqiaause
jntduaap
timsxgui
dqvlekla
zkxemsmj
zbquxifp
mgyvaneg
eoqtkvpo
wxyqshnk
vritmuaz
nzqlrzfn`;

var transmissions = input.split('\n');

var frequencies = transmissions[0].split('').map(() => {return {}});

transmissions.forEach(transmission => {
  transmission.split('').forEach((letter, idx) => {
    if (!frequencies[idx].hasOwnProperty(letter)) {
      frequencies[idx][letter] = 0
    }
    frequencies[idx][letter] += 1
  })
});

var message1 = frequencies.map((dict) => {
  var values = [];
  for (letter in dict) {
    if (dict.hasOwnProperty(letter)) {
      values = [... values, [letter, dict[letter]]];
    }
  }
  return values.reduce((a, b) => {
    max = a[1];
    freq = b[1];
    return (freq <= max) ? a : b;
  }, ("", 0));
}).map(x => x[0]).join('');

console.log(message1);

var message2 = frequencies.map((dict) => {
  var values = [];
  for (letter in dict) {
    if (dict.hasOwnProperty(letter)) {
      values = [... values, [letter, dict[letter]]];
    }
  }
  return values.reduce((a, b) => {
    max = a[1];
    freq = b[1];
    return (freq > max) ? a : b;
  }, ("", 0));
}).map(x => x[0]).join('');

console.log(message2);
